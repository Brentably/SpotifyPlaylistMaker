{"ast":null,"code":"var _jsxFileName = \"/Users/brent/Desktop/Dev/SpotifyPlaylistMaker/main-bootstrap/src/components/Login.js\";\nimport React from \"react\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"../auth/config\"; // import hash from \"../auth/hash\"\n// import { useHistory } from \"react-router-dom\"\n// // let history = useHistory()\n// const [userData, setUserData] = useState(null)\n// const [token, setToken] = useState(null)\n// // controller / signal stuff is for cancelling the promise if the component unmounts\n// useEffect(() => {\n//   const controller = new AbortController()\n//   const signal = controller.signal\n//   // grabs the token from the url and sets it in state\n//   let thetoken = hash.access_token\n//   setToken(thetoken)\n//   // tries to hook into the api and set the reponse to state\n//   const spotifyConnect = async () => {\n//     let response = await fetch(\n//       \"https://api.spotify.com/v1/me\",\n//       {\n//         method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n//         mode: \"cors\", // no-cors, *cors, same-origin\n//         headers: {\n//           Authorization: `Bearer ${thetoken}`,\n//         },\n//         signal: signal\n//       }\n//     )\n//     setUserData(await response.json())\n//   }\n//   try {\n//     spotifyConnect()\n//   } catch (error) {\n//     console.log(error)\n//   }\n//   return () => controller.abort()\n// }, [])\n// useEffect(() => {\n//   console.log(userData)\n// }, [userData])\n\nconst Login = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"fredoka-font\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"BPM Playlist Maker\"), /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"text-secondary mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"This app allows you to create playlists based on the BPM of songs to create perfectly customized running playlists.\"), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"btn text-white bg-success hover:bg-green-800\",\n    href: `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=false`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"Connect to Spotify\"));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/brent/Desktop/Dev/SpotifyPlaylistMaker/main-bootstrap/src/components/Login.js"],"names":["React","authEndpoint","clientId","redirectUri","scopes","Login","join"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,WAAjC,EAA8CC,MAA9C,QAA4D,gBAA5D,C,CACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,sBACE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2HAFF,eAME;AACE,IAAA,SAAS,EAAC,8CADZ;AAEE,IAAA,IAAI,EAAG,GAAEJ,YAAa,cAAaC,QAAS,iBAAgBC,WAAY,UAASC,MAAM,CAACE,IAAP,CAC/E,KAD+E,CAE7E,wCAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANF,CADF;AAiBD,CAlBD;;AAoBA,eAAeD,KAAf","sourcesContent":["import React from \"react\"\nimport { authEndpoint, clientId, redirectUri, scopes } from \"../auth/config\"\n// import hash from \"../auth/hash\"\n// import { useHistory } from \"react-router-dom\"\n\n// // let history = useHistory()\n\n// const [userData, setUserData] = useState(null)\n// const [token, setToken] = useState(null)\n// // controller / signal stuff is for cancelling the promise if the component unmounts\n// useEffect(() => {\n//   const controller = new AbortController()\n//   const signal = controller.signal\n//   // grabs the token from the url and sets it in state\n//   let thetoken = hash.access_token\n//   setToken(thetoken)\n\n//   // tries to hook into the api and set the reponse to state\n//   const spotifyConnect = async () => {\n//     let response = await fetch(\n//       \"https://api.spotify.com/v1/me\",\n//       {\n//         method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n//         mode: \"cors\", // no-cors, *cors, same-origin\n//         headers: {\n//           Authorization: `Bearer ${thetoken}`,\n//         },\n//         signal: signal\n//       }\n//     )\n//     setUserData(await response.json())\n//   }\n//   try {\n//     spotifyConnect()\n//   } catch (error) {\n//     console.log(error)\n//   }\n\n//   return () => controller.abort()\n// }, [])\n\n// useEffect(() => {\n//   console.log(userData)\n// }, [userData])\n\nconst Login = () => {\n  return (\n    <div className=\"\">\n      <h1 className=\"fredoka-font\">BPM Playlist Maker</h1>\n      <h5 className=\"text-secondary mb-4\">\n        This app allows you to create playlists based on the BPM of songs to\n        create perfectly customized running playlists.\n      </h5>\n      <a\n        className=\"btn text-white bg-success hover:bg-green-800\"\n        href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n          \"%20\"\n          )}&response_type=token&show_dialog=false`}\n          >\n        Connect to Spotify\n      </a>\n    </div>\n  )\n}\n\nexport default Login\n"]},"metadata":{},"sourceType":"module"}