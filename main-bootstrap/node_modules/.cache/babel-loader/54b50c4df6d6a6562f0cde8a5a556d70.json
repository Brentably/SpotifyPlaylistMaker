{"ast":null,"code":"var _jsxFileName = \"/Users/brent/Desktop/Dev/SpotifyPlaylistMaker/main-bootstrap/src/pages/Home.js\";\nimport React, { useState, useEffect } from 'react';\nimport hash from \"../auth/hash\";\nimport Header from '../components/Header';\nimport Sidebar from '../components/Sidebar';\nimport Login from '../components/Login';\nimport '../App.css';\n\nconst Home = () => {\n  hash.error && console.log(hash.error);\n  const [token, setToken] = useState(null);\n  const [userData, setUserData] = useState(null);\n  const TokenContext = React.createContext(); // checks the url for the token, and sets the token if it's there, otherwise checks local storage and sets that\n\n  useEffect(() => {\n    if (hash.access_token) {\n      setToken(hash.access_token);\n      localStorage.setItem('token', hash.access_token);\n    } else {\n      setToken(localStorage.getItem('token'));\n    }\n  }, []);\n  useEffect(() => {\n    const spotifyConnect = async key => {\n      if (!key) return;\n      let response = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors',\n        // no-cors, *cors, same-origin\n        headers: {\n          'Authorization': `Bearer ${key}`\n        }\n      });\n      setUserData(await response.json());\n    }; // spotifyConnect(localStorage.getItem('token'))\n\n\n    try {\n      spotifyConnect(localStorage.getItem('token'));\n    } // if the token is old, then it sets the token to refresh, which will render the Login component again\n    catch (error) {\n      console.log(error);\n    }\n  }, [token]);\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n  return userData ? /*#__PURE__*/React.createElement(TokenContext.Provider, {\n    value: token,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Sidebar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  })) : /*#__PURE__*/React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/brent/Desktop/Dev/SpotifyPlaylistMaker/main-bootstrap/src/pages/Home.js"],"names":["React","useState","useEffect","hash","Header","Sidebar","Login","Home","error","console","log","token","setToken","userData","setUserData","TokenContext","createContext","access_token","localStorage","setItem","getItem","spotifyConnect","key","response","fetch","method","mode","headers","json"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAO,YAAP;;AAGA,MAAMC,IAAI,GAAG,MAAM;AAEjBJ,EAAAA,IAAI,CAACK,KAAL,IAAcC,OAAO,CAACC,GAAR,CAAYP,IAAI,CAACK,KAAjB,CAAd;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAMc,YAAY,GAAGf,KAAK,CAACgB,aAAN,EAArB,CALiB,CAOjB;;AACAd,EAAAA,SAAS,CAAC,MAAK;AACb,QAAGC,IAAI,CAACc,YAAR,EAAsB;AACpBL,MAAAA,QAAQ,CAACT,IAAI,CAACc,YAAN,CAAR;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BhB,IAAI,CAACc,YAAnC;AACD,KAHD,MAGO;AACLL,MAAAA,QAAQ,CAACM,YAAY,CAACE,OAAb,CAAqB,OAArB,CAAD,CAAR;AACD;AACF,GAPQ,EAON,EAPM,CAAT;AAUAlB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,cAAc,GAAG,MAAOC,GAAP,IAAe;AACpC,UAAG,CAACA,GAAJ,EAAS;AACT,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AAC1DC,QAAAA,MAAM,EAAE,KADkD;AAC3C;AACfC,QAAAA,IAAI,EAAE,MAFoD;AAE5C;AACdC,QAAAA,OAAO,EAAE;AACP,2BAAkB,UAASL,GAAI;AADxB;AAHiD,OAAlC,CAA1B;AAMER,MAAAA,WAAW,CAAC,MAAMS,QAAQ,CAACK,IAAT,EAAP,CAAX;AACD,KATH,CADc,CAYZ;;;AACF,QAAG;AAACP,MAAAA,cAAc,CAACH,YAAY,CAACE,OAAb,CAAqB,OAArB,CAAD,CAAd;AAA8C,KAAlD,CACA;AACA,WAAMZ,KAAN,EAAa;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAlBQ,EAkBN,CAACG,KAAD,CAlBM,CAAT;AAoBAT,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAKE,SAAOA,QAAQ,gBACb,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEF,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADa,gBAMb,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF;AAQD,CAnDH;;AAuDA,eAAeJ,IAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport hash from \"../auth/hash\"\nimport Header from '../components/Header';\nimport Sidebar from '../components/Sidebar';\nimport Login from '../components/Login';\nimport '../App.css'\n\n\nconst Home = () => {\n\n  hash.error && console.log(hash.error)\n  const [token, setToken] = useState(null)\n  const [userData, setUserData] = useState(null)\n  const TokenContext = React.createContext()\n\n  // checks the url for the token, and sets the token if it's there, otherwise checks local storage and sets that\n  useEffect(()=> {\n    if(hash.access_token) {\n      setToken(hash.access_token)\n      localStorage.setItem('token', hash.access_token)\n    } else {\n      setToken(localStorage.getItem('token'))\n    }\n  }, [])\n\n\n  useEffect(() => {\n    const spotifyConnect = async (key) => {\n      if(!key) return\n      let response = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        headers: {\n          'Authorization': `Bearer ${key}`\n        }})\n        setUserData(await response.json())\n      }\n      \n      // spotifyConnect(localStorage.getItem('token'))\n    try{spotifyConnect(localStorage.getItem('token'))}\n    // if the token is old, then it sets the token to refresh, which will render the Login component again\n    catch(error) {\n      console.log(error)\n    }\n  }, [token])\n\n  useEffect(() => {\n    console.log(userData)\n  }, [userData])\n\n  \n    return userData ?\n      <TokenContext.Provider value={token}>\n      <Header />\n      <Sidebar />\n      </TokenContext.Provider>\n      :\n      <Login />\n    \n  }\n\n\n\nexport default Home"]},"metadata":{},"sourceType":"module"}