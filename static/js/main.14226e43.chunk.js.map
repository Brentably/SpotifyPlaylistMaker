{"version":3,"sources":["icons/defaultIcon.svg","icons/search.svg","auth/hash.js","components/Header.js","auth/config.js","components/Login.js","components/Loading.js","components/MusicTypeSelector.js","components/Card.js","helpers/callAPI.js","components/Playlists.js","components/Albums.js","components/Search.js","redux/index.js","Home.js","App.js","index.js"],"names":["module","exports","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Header","props","userData","className","src","images","url","defaultIcon","alt","style","maxHeight","width","objectFit","borderRadius","scopes","ModalHeader","styled","div","Body","CenteredDiv","ModalBody","Login","Button","href","join","backgroundColor","Loading","NLink","NavLink","MusicTypeSelector","stickyHeader","useRef","useState","stick","setStick","scrollVal","setScrollVal","scrollValRef","handleScroll","this","scrollY","current","useEffect","addEventListener","offsetTop","removeEventListener","height","clientHeight","ref","to","activeClassName","Card","id","margin","imgSrc","type","name","owner","callAPI","fetchURL","token","a","fetch","method","mode","headers","response","ok","status","json","connect","store","playlists","setPlaylists","nextPlaylistUrl","setNextPlaylistUrl","handleLoadMore","body","prevPlaylists","items","next","initHandleLoadMore","useCallback","length","pageStart","loadMore","hasMore","Boolean","loader","key","map","playlist","display_name","albums","setAlbums","nextAlbumUrl","setNextAlbumUrl","prevAlbums","newAlbums","album","console","log","artists","artist","SearchInput","input","searchIcon","Search","value","setValue","placeholder","autoFocus","onChange","event","target","initState","createStore","state","action","payload","__REDUX_DEVTOOLS_EXTENSION__","addToken","error","setToken","setUserData","authFailed","setAuthFailed","access_token","localStorage","clear","setItem","getItem","_token","spotifyConnect","initialEntries","initialIndex","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14226e43.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultIcon.cd9692eb.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.6f300368.svg\";","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;","import React from 'react';\nimport defaultIcon from \"../icons/defaultIcon.svg\"\n\nconst Header = (props) => {\n    const {userData} = props\n    \n\n\n    return (\n        <div className=\"mb-2 text-center text-lg sm:text-xl md:text-2xl font-fredoka pt-2 pl-2 pr-2 pb-0 flex justify-between tracking-wide text-white\">\n                <span className=\"flex justify-center self-center\">\n                {/* <img src={require(\"../icons/runnerman.svg\")} alt=\"running / music logo\" className=\"inline mr-1 self-center\" style={{verticalAlign: 'middle', height: \"1.2em\"}}/> */}\n                BPM Playlist Maker\n                </span>\n                {/* pulls in the profile picture and the css just, uhhh, makes it circular and stuff */}\n                \n                <img src={userData.images[0] ? userData.images[0].url : defaultIcon} alt=\"profile\" className=\"self-center mr-2\" style={{maxHeight: \"1.2em\", width: \"1.2em\", objectFit: \"cover\", borderRadius: \"50%\"}}/> \n        </div>\n    )\n}\n\n\nexport default Header","\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"4451d90a4f634c33b6f4e015d616ab44\";\nexport const redirectUri = \"https://brentably.github.io/SpotifyPlaylistMaker\";\n// export const redirectUri = \"http://192.168.0.246:3000/\";\nexport const scopes = [\n    \"ugc-image-upload\",\n    \"user-top-read\",\n    \"user-read-playback-position\",\n    \"user-read-recently-played\",\n    \"user-read-playback-state\",\n    \"user-read-currently-playing\",\n    \"user-modify-playback-state\",\n    \"user-library-modify\",\n    \"user-library-read\",\n    \"streaming\",\n    \"app-remote-control\",\n    \"user-read-private\",\n    \"user-read-email\",\n    \"user-follow-modify\",\n    \"user-follow-read\",\n    \"playlist-modify-public\",\n    \"playlist-read-collaborative\",\n    \"playlist-read-private\",\n    \"playlist-modify-private\"\n];","import React from \"react\"\nimport { authEndpoint, clientId, redirectUri, scopes } from \"../auth/config\"\n// import Modal from \"react-bootstrap/Modal\"\nimport Button from \"react-bootstrap/Button\"\nimport styled from \"styled-components\"\n\nconst ModalHeader = styled.div`\ntext-align: center;\nfont-size: 2.5rem;\n`\nconst Body = styled.div`\nwidth: 100vw;\nheight: 100vh;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n`\n\nconst CenteredDiv = styled.div`\ncolor: white;\nwidth: 400px;\n\n`\n\nconst ModalBody = styled.div`\nword-wrap: break-word;\nmargin: 0 1em;\ntext-align: center;\n`\n\nconst Login = () => {\n  return (\n    <Body>\n      <CenteredDiv>\n        <ModalHeader className=\"font-fredoka\">BPM Playlist Maker</ModalHeader>\n        <ModalBody >\n          This app allows you to create playlists based on the BPM of songs to\n            create perfectly customized running playlists.<br/>\n          \n          <Button\n            href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n              \"%20\"\n            )}&response_type=token&show_dialog=false`}\n            className=\"my-3\" style={{backgroundColor: \"#1dd05d\"}}\n          >\n            Connect to Spotify\n          </Button>\n        </ModalBody>\n        </CenteredDiv>\n    </Body>\n  )\n}\n\nexport default Login\n\n\n\n","import React from 'react'\n\nconst Loading = () => <div className=\"text-white text-3xl text-center\"></div>\n\nexport default Loading","import React, {useEffect, useRef, useState} from \"react\"\nimport styled from \"styled-components\"\nimport { NavLink } from \"react-router-dom\"\n\nconst NLink = styled(NavLink)`\n  margin-right: 1em;\n  transition: color 0.1s ease-out;\n  &:active,\n  :hover {\n    color: #808a9f;\n    text-decoration: none;\n    cursor: default;\n    transition: color 0.1s ease-out;\n  }\n`\n\n// This was a lengthy ass process of styling the links properly, but in the future, I think I will just set an onclick function to route to where I want to go, otherwise just use styled components, b/c overriding the default anchor style is a pain\nconst MusicTypeSelector = () => {\n    const stickyHeader = useRef(null)\n    const [stick, setStick] = useState(false)\n    const [scrollVal, setScrollVal] = useState(null)\n    const scrollValRef = useRef()\n    scrollValRef.current = scrollVal\n\n\n    function handleScroll() {\n        // console.log(this.scrollY)\n        // console.log(scrollValRef.current)\n        if(this.scrollY > scrollValRef.current) {\n          setStick(true)\n        } else {\n          setStick(false)\n        }\n    }\n\n\n    useEffect(() => {\n        window.addEventListener('scroll', handleScroll)\n        // On initial render, useEffect grabs the distance the stickyHeader is from the top, then sets the scrollValue to that value, which is saved and remembered, so once the stickyHeader's position is set to fixed, it doesn't override and say that the  sticky header has no distance from the top\n        // the only problem here is that if someone opens the window, scrolls down, resizes the window and scrolls up, it'll look a little funny, but that's a edge / corner case, and I'm not too worried about that now. I may be able to fix that if I take a different approach with my if/else statement in the handleScroll, but then my handleScroll would have to know the stick value\n        setScrollVal(stickyHeader.current.offsetTop)\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [])\n  return (\n      <>\n    {stick? <div style={{width: \"100vw\", height: `${stickyHeader.current.clientHeight}px`}}></div> : null}\n    <div className={stick ? \"stick text-silver flex text-xl tracking-wide p-2 font-nunito-semibold\" : \"w-full text-silver flex tracking-wide text-xl p-2 font-nunito-semibold\"} ref={stickyHeader}>\n      <NLink to=\"/playlists\" className=\"text-silver\" activeClassName=\"selected\">\n        Playlists\n      </NLink>\n      <NLink to=\"/albums\" className=\"text-silver\" activeClassName=\"selected\">\n        Albums\n      </NLink>\n      <NLink to=\"/search\" className=\"text-silver\" activeClassName=\"selected\">\n        Search\n      </NLink>\n    </div>\n    </>\n  )\n}\n\nexport default MusicTypeSelector\n","import React from 'react'\nimport defaultIcon from \"../icons/defaultIcon.svg\"\n\nconst Card = (props) => {\n    return (\n        <div id=\"card\" className=\"text-white flex font-nunito-semibold ellipsis items-center ml-2\" style={{margin: \"0.6rem\"}}>\n            {/* allows whatever component that is rendering the card to just put default as a prop if there is no image there */}\n            <img src={props.imgSrc === \"default\" ? defaultIcon : props.imgSrc} alt={props.type} className=\"mr-2\" style={{objectFit: \"cover\", height: \"3.4em\", width: \"3.4em\"}} />\n            <div className=\"ellipsis\">\n            <div className=\"text-md ellipsis\">{props.name}</div>\n            <div className=\"text-sm text-silver\">{props.owner}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Login from '../components/Login'\n\nconst callAPI = async (fetchURL, token) => {\n        let response = await fetch(fetchURL, {\n          method: 'GET', // *GET, POST, PUT, DELETE, etc.\n          mode: 'cors', // no-cors, *cors, same-origin\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }})\n          if(response.ok && response.status === \"200\") return await response.json()\n          // if authorization token is old, attempts to help the user login again, if this breaks, try a redirect?\n          else if(response.status === \"401\") return <Login />\n          else return await response\n}\n\nexport default callAPI","import React, { useEffect, useState, useCallback } from \"react\"\nimport Card from \"./Card\"\nimport Loading from \"./Loading\"\nimport callAPI from \"../helpers/callAPI\"\nimport InfiniteScroll from \"react-infinite-scroller\"\nimport { connect } from \"react-redux\"\n\nconst Playlists = (props) => {\n  const { token } = props\n  const [playlists, setPlaylists] = useState([])\n  const [nextPlaylistUrl, setNextPlaylistUrl] = useState(\n    \"https://api.spotify.com/v1/me/playlists?offset=0&limit=40\"\n  )\n\n  // useEffect(() => {\n  //     console.log(playlists)\n  //     // playlists && console.log(playlists.items[0])\n  // }, [playlists])\n\n  // when the scroller reaches the bottom, this is the load more function\n  const handleLoadMore = async () => {\n    //  returns there are no more playlists to load\n    if (!nextPlaylistUrl) return\n\n    const response = await callAPI(nextPlaylistUrl, token)\n    if (response.ok) {\n      const body = await response.json()\n      // puts playlists in state, which triggers a re-render\n      setPlaylists((prevPlaylists) => {\n        return [...prevPlaylists, ...body.items]\n      })\n\n      // and sets the next playlist url for the next time the load more function is called\n      setNextPlaylistUrl(body.next)\n    }\n  }\n\n  // annoying syntax used to load the initial data on the first render\n  const initHandleLoadMore = useCallback(handleLoadMore, [])\n  useEffect(() => {\n    initHandleLoadMore()\n  }, [initHandleLoadMore])\n\n  // if state has been updated\n  return playlists.length > 0 ? (\n    // if the undisplay prop is set to true, this div hides all the playlists, that way it doesn't have to call the api.\n    // there's got to be a better way to do this though...\n    <>\n      <InfiniteScroll\n        pageStart={0}\n        loadMore={handleLoadMore}\n        // the api returns NULL if you've loaded all the playlists, which will set the hasMore boolean to false, and stop infinite scroll from trying to load any more\n        hasMore={Boolean(nextPlaylistUrl)}\n        loader={\n          <Loading key=\"Loading\"/>\n        }\n      >\n        {playlists.map((playlist) => (\n          <Card\n            key={playlist.id}\n            type=\"playlist\"\n            imgSrc={playlist.images[0] ? playlist.images[0].url : \"default\"}\n            name={playlist.name}\n            owner={`by ${playlist.owner.display_name}`}\n          />\n        ))}\n      </InfiniteScroll>\n    </>\n  ) : (\n    <Loading />\n  )\n}\n\nexport default connect((store) => ({ token: store.token }), {})(Playlists)\n\n// function mapStateToProps(globalState) {\n//   // return an object where the keys are the name of the prop your component wants,\n//   // values are the actual parts of the global state your component wants\n// }\n\n// export default connect(/* What parts of state do you want? */, /* What actions to dispatch? */)(App)\n","import React, { useEffect, useState, useCallback } from \"react\"\nimport Card from \"./Card\"\nimport Loading from \"./Loading\"\nimport callAPI from \"../helpers/callAPI\"\nimport InfiniteScroll from \"react-infinite-scroller\"\nimport { connect } from \"react-redux\"\n\nconst Albums = (props) => {\n  const { token } = props\n  const [albums, setAlbums] = useState([])\n  const [nextAlbumUrl, setNextAlbumUrl] = useState(\n    \"https://api.spotify.com/v1/me/albums?offset=0&limit=40\"\n  )\n\n\n\n  // when the scroller reaches the bottom, this is the load more function\n  const handleLoadMore = async () => {\n    //  returns there are no more playlists to load\n    if (!nextAlbumUrl) return\n\n    const response = await callAPI(nextAlbumUrl, token)\n    if (response.ok) {\n      const body = await response.json()\n      // puts playlists in state, which triggers a re-render\n      setAlbums((prevAlbums) => {\n        const newAlbums = [...body.items].map((item) => item.album)\n        return [...prevAlbums, ...newAlbums]\n      })\n      console.log(body)\n      // and sets the next playlist url for the next time the load more function is called\n      setNextAlbumUrl(body.next)\n    }\n  }\n\n  // annoying syntax used to load the initial data on the first render\n  const initHandleLoadMore = useCallback(handleLoadMore, [])\n  useEffect(() => {\n    initHandleLoadMore()\n  }, [initHandleLoadMore])\n\n  // if state has been updated\n  return albums.length > 0 ? (\n    // if the undisplay prop is set to true, this div hides all the playlists, that way it doesn't have to call the api.\n    // there's got to be a better way to do this though...\n    <>\n      <InfiniteScroll\n        pageStart={0}\n        loadMore={handleLoadMore}\n        // the api returns NULL if you've loaded all the playlists, which will set the hasMore boolean to false, and stop infinite scroll from trying to load any more\n        hasMore={Boolean(nextAlbumUrl)}\n        loader={\n          <Loading key=\"239rehoufwds\"/>\n        }\n      >\n        {albums.map((album) => {\n          let owner = [...album.artists.map((artist) => artist.name)].join(\", \")\n          return <Card key={album.id} type=\"album\" name={album.name} owner={owner} imgSrc={album.images[0] ? album.images[0].url : \"default\"}/>\n        })}\n      </InfiniteScroll>\n    </>\n  ) : (\n    <Loading />\n  )\n}\n\nexport default connect((store) => ({ token: store.token }), {})(Albums)\n","import React, { useState } from \"react\"\nimport styled from 'styled-components'\nimport searchIcon from '../icons/search.svg'\n\nconst SearchInput = styled.input`\nwidth: 100%;\npadding: 0.25em 0.25em 0.25em 2em;\nborder-radius: 1em;\nbackground-image: url('${searchIcon}');\n  background-position: 10px 10px;\n  background-repeat: no-repeat;\n  padding-left: 40px;\n`\n\n\nconst Search = () => {\n  const [value, setValue] = useState(\"\")\n  return (\n    <div className=\"m-2\">\n    <SearchInput\n      type=\"search\"\n      placeholder={\"Search for Artists, Songs, etc.\"}\n      autoFocus\n      value={value}\n      onChange={(event) => setValue(event.target.value)}\n    />\n    \n    </div>\n  )\n}\n\nexport default Search\n","import { createStore } from \"redux\"\n\nexport function addToken(token) {\n  return {\n    type: \"ADD_TOKEN\",\n    payload: token,\n  }\n}\n\nconst initState = {\n  token: null,\n}\n\nfunction reducer(state = initState, action) {\n  switch (action.type) {\n    case \"ADD_TOKEN\":\n      return {\n        ...state,\n        token: action.payload,\n      }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\n// store.subscribe(() => console.log(store.getState()))\n\nexport default store\n","import React, { useState, useEffect} from 'react';\nimport hash from \"./auth/hash\"\nimport Header from './components/Header';\nimport Login from './components/Login';\nimport Loading from './components/Loading';\nimport MusicTypeSelector from './components/MusicTypeSelector';\nimport Playlists from './components/Playlists'\nimport Albums from './components/Albums'\nimport Search from './components/Search'\nimport {connect} from \"react-redux\"\nimport {addToken} from './redux'\nimport './App.css'\nimport {\n  MemoryRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\n\nconst Home = (props) => {\n  const {addToken} = props\n  hash.error && console.log(hash.error)\n  const [token, setToken] = useState(null)\n  const [userData, setUserData] = useState(null)\n  const [authFailed, setAuthFailed] = useState(false)\n\n  // checks the url for the token, and sets the token if it's there, otherwise checks local storage and sets that, also sets the token in redux global store with props.addToken\n  // I'm using localStorage right now, mainly for my own development purposes, it keeps me from having to hit login every time I edit code and want to look at the app.\n  useEffect(()=> {\n    if(hash.access_token) {\n      setToken(hash.access_token)\n      localStorage.clear()\n      localStorage.setItem('token', hash.access_token)\n      addToken(hash.access_token)\n      console.log(hash.access_token)\n    } else {\n      setToken(localStorage.getItem('token'))\n      addToken(localStorage.getItem('token'))\n    }\n  }, [addToken]) /* addToken will never change, it's just a required dependency*/\n\n// calls the api, helps make sure everything is working\n  useEffect(() => {\n    const spotifyConnect = async (_token) => {\n      // if the key doesn't exist, then it stops the function and allows for the Login component to be rendered\n      if(!_token) {\n        setAuthFailed(true)\n        return\n      }\n      let response = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        headers: {\n          'Authorization': `Bearer ${_token}`\n        }})\n        // sets state to the response of the api\n        if(response.ok) setUserData(await response.json())\n        // if the response didn't work, and it had a status of 401 unauthorized, sets failed to true, which renders the login component\n        if(!response.ok && response.status === \"401\") setAuthFailed(true)\n\n      }\n      spotifyConnect(token)\n  }, [token])\n\n  // useEffect(() => {\n  //   console.log(userData)\n  // }, [userData])\n\n\n    if(userData) {\n      return (<>\n        <Header userData={userData}/>\n        <Router \n          initialEntries={[\"/playlists\", \"/albums\", \"/search\"]}\n          initialIndex={2}\n          >\n          <MusicTypeSelector/>\n          <Switch>\n            <Route path=\"/playlists\">\n              <Playlists />\n            </Route>\n            <Route path=\"/albums\">\n              <Albums />\n            </Route>\n            <Route path=\"/search\">\n              <Search />\n            </Route>\n          </Switch>\n        </Router>\n        </>)\n    } else if (authFailed) {\n      return <Login />\n      } else {\n        return <Loading />\n      }\n  }\n\n\n\n\n\n// redux: this component isn't pulling anything from redux, but IS pushing the token to redux store\nexport default connect(null, {addToken})(Home)","import React from 'react';\nimport Home from './Home'\n// import { GlobalContextProvider }  from './hooks/GlobalContext'\n\nfunction App() {\n  return (\n      <Home />\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport './App.css'\nimport App from './App';\nimport {Provider} from \"react-redux\"\nimport store from \"./redux\"\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Router> */}\n      <Provider store={store}>\n        <App />\n      </Provider>\n    {/* </Router> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}