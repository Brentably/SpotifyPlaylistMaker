{"version":3,"sources":["icons/defaultIcon.svg","auth/hash.js","components/Header.js","auth/config.js","components/Login.js","components/Loading.js","components/MusicTypeSelector.js","components/Card.js","helpers/callAPI.js","components/Playlists.js","redux/index.js","Home.js","App.js","index.js"],"names":["module","exports","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Header","props","userData","className","src","images","url","alt","style","maxHeight","width","objectFit","borderRadius","scopes","ModalHeader","styled","div","Body","CenteredDiv","ModalBody","Login","Button","href","join","backgroundColor","Loading","Item","MusicTypeSelector","type","onClick","setType","Card","margin","defaultIcon","height","name","owner","display_name","callAPI","fetchURL","token","a","fetch","method","mode","headers","response","ok","status","json","connect","store","useState","playlists","setPlaylists","nextPlaylistUrl","setNextPlaylistUrl","handleLoadMore","body","prevPlaylists","items","console","log","next","initHandleLoadMore","useCallback","useEffect","length","undisplay","pageStart","loadMore","hasMore","Boolean","loader","key","map","playlist","id","musicType","initState","createStore","state","action","payload","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","addToken","error","setToken","setUserData","setMusicType","authFailed","setAuthFailed","access_token","localStorage","clear","setItem","getItem","_token","spotifyConnect","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HAAAA,EAAOC,QAAU,IAA0B,yC,kNCCrCC,EAAOC,OAAOC,SAASF,KAC1BG,UAAU,GACVC,MAAM,KACNC,QAAO,SAASC,EAASC,GACxB,GAAIA,EAAM,CACR,IAAIC,EAAQD,EAAKH,MAAM,KACvBE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAE/C,OAAOF,IACN,IACLL,OAAOC,SAASF,KAAO,GAERA,QCSAU,EAnBA,SAACC,GAAW,IAChBC,EAAYD,EAAZC,SAEP,OACI,oCACA,yBAAKC,UAAU,8GACP,0BAAMA,UAAU,mCAAhB,sBAMA,yBAAKC,IAAKF,EAASG,OAAO,GAAGC,IAAKC,IAAI,UAAUJ,UAAU,mBAAmBK,MAAO,CAACC,UAAW,QAASC,MAAO,QAASC,UAAW,QAASC,aAAc,Y,OCR9JC,EAAS,CAClB,mBACA,gBACA,8BACA,4BACA,2BACA,8BACA,6BACA,sBACA,oBACA,YACA,qBACA,oBACA,kBACA,qBACA,mBACA,yBACA,8BACA,wBACA,2B,ghBCpBJ,IAAMC,EAAcC,IAAOC,IAAV,KAIXC,EAAOF,IAAOC,IAAV,KAQJE,EAAcH,IAAOC,IAAV,KAMXG,EAAYJ,IAAOC,IAAV,KA6BAI,EAvBD,WACZ,OACE,kBAACH,EAAD,KACE,kBAACC,EAAD,KACE,kBAACJ,EAAD,CAAaX,UAAU,gBAAvB,sBACA,kBAACgB,EAAD,2HAEkD,6BAEhD,kBAACE,EAAA,EAAD,CACEC,KAAI,UDvCY,yCCuCZ,sBDpCQ,mCCoCR,yBDnCW,mDCmCX,kBAA6ET,EAAOU,KACtF,OADE,0CAGJpB,UAAU,OAAOK,MAAO,CAACgB,gBAAiB,YAJ5C,0BCnCKC,EAFC,kBAAM,yBAAKtB,UAAU,qC,2FCErC,IAAMuB,EAAOX,IAAOC,IAAV,KAcKW,EAXW,SAAC1B,GACvB,OACI,yBAAKE,UAAU,wEACf,kBAACuB,EAAD,CAAMvB,UAA0B,cAAfF,EAAM2B,MAAwB,WAAYC,QAAS,WAAO5B,EAAM6B,QAAQ,eAAzF,aACA,kBAACJ,EAAD,CAAMvB,UAA0B,WAAfF,EAAM2B,MAAqB,WAAYC,QAAS,WAAO5B,EAAM6B,QAAQ,YAAtF,UACA,kBAACJ,EAAD,CAAMvB,UAA0B,YAAfF,EAAM2B,MAAsB,WAAYC,QAAS,WAAO5B,EAAM6B,QAAQ,aAAvF,a,yBCIOC,EAbF,SAAC9B,GAEV,OACI,yBAAKE,UAAU,6DAA6DK,MAAO,CAACwB,OAAQ,WACxF,yBAAK5B,IAAKH,EAAMI,OAAO,GAAKJ,EAAMI,OAAO,GAAGC,IAAM2B,IAAa1B,IAAI,oBAAoBJ,UAAU,OAAOK,MAAO,CAACG,UAAW,QAASuB,OAAQ,QAASxB,MAAO,WAC5J,yBAAKP,UAAU,YACf,yBAAKA,UAAU,oBAAoBF,EAAMkC,MACzC,yBAAKhC,UAAU,uBAAf,MAAyCF,EAAMmC,MAAMC,iBCGlDC,EAXF,uCAAG,WAAOC,EAAUC,GAAjB,eAAAC,EAAA,sEACaC,MAAMH,EAAU,CACnCI,OAAQ,MACRC,KAAM,OACNC,QAAS,CACP,cAAgB,UAAhB,OAA2BL,MALvB,YACJM,EADI,QAOMC,IAA0B,QAApBD,EAASE,OAPrB,gCAOoDF,EAASG,OAP7D,gEAQYH,EARZ,qFAAH,wD,wBC4DEI,eAAQ,SAACC,GAAD,MAAY,CAACX,MAAOW,EAAMX,SAAS,GAA3CU,EAtDG,SAACjD,GAAW,IACrBuC,EAASvC,EAATuC,MADoB,EAEOY,mBAAS,IAFhB,mBAEpBC,EAFoB,KAETC,EAFS,OAGmBF,mBAAS,6DAH5B,mBAGpBG,EAHoB,KAGHC,EAHG,KAcrBC,EAAc,uCAAG,8BAAAhB,EAAA,yDAEjBc,EAFiB,iEAIEjB,EAAQiB,EAAiBf,GAJ3B,YAIfM,EAJe,QAKTC,GALS,iCAMAD,EAASG,OANT,OAMbS,EANa,OAQnBJ,GAAa,SAACK,GACZ,MAAM,GAAN,mBAAWA,GAAX,YAA6BD,EAAKE,WAEpCC,QAAQC,IAAIJ,GAEZF,EAAmBE,EAAKK,MAbL,4CAAH,qDAkBdC,EAAqBC,sBAAYR,EAAgB,IAIvD,OAHAS,qBAAU,WAAOF,MAAuB,CAACA,IAGjCX,EAAUc,OAAS,EAG3B,yBAAKhE,UAAWF,EAAMmE,UAAY,SAAW,aAC3C,kBAAC,IAAD,CACFC,UAAW,EACXC,SAAUb,EAEVc,QAASC,QAAQjB,GACjBkB,OAAQ,yBAAKtE,UAAU,SAASuE,IAAK,GAA7B,gBAEPrB,EAAUsB,KAAI,SAAAC,GAAQ,OAAI,kBAAC,EAAD,iBAAUA,EAAV,CAAoBF,IAAKE,EAASC,GAAIC,UAAU,mBAI3E,kBAAC,EAAD,S,gBCjDF,IAAMC,EAAY,CACdvC,MAAO,MAeX,IAAMW,EAAQ6B,aAZd,WAA6C,IAA5BC,EAA2B,uDAAnBF,EAAWG,EAAQ,uCACxC,OAAOA,EAAOtD,MACV,IAAK,YACD,OAAO,2BACAqD,GADP,IAEIzC,MAAO0C,EAAOC,UAEtB,QACI,OAAOF,KAKf1F,OAAO6F,8BAAgC7F,OAAO6F,gCAGlDjC,EAAMkC,WAAU,kBAAMxB,QAAQC,IAAIX,EAAMmC,eAGzBnC,QCqDAD,cAAQ,KAAM,CAACqC,SDnFvB,SAAkB/C,GACrB,MAAO,CACHZ,KAAM,YACNuD,QAAS3C,KCgFFU,EAvEF,SAACjD,GAAW,IAChBsF,EAAYtF,EAAZsF,SACPjG,EAAKkG,OAAS3B,QAAQC,IAAIxE,EAAKkG,OAFT,MAGIpC,mBAAS,MAHb,mBAGfZ,EAHe,KAGRiD,EAHQ,OAIUrC,mBAAS,MAJnB,mBAIflD,EAJe,KAILwF,EAJK,OAKYtC,mBAAS,aALrB,mBAKf0B,EALe,KAKJa,EALI,OAMcvC,oBAAS,GANvB,mBAMfwC,EANe,KAMHC,EANG,KAmDpB,OAzCF3B,qBAAU,WACL5E,EAAKwG,cACNL,EAASnG,EAAKwG,cACdC,aAAaC,QACbD,aAAaE,QAAQ,QAAS3G,EAAKwG,cACnCP,EAASjG,EAAKwG,cACdjC,QAAQC,IAAIxE,EAAKwG,gBAEjBL,EAASM,aAAaG,QAAQ,UAC9BX,EAASQ,aAAaG,QAAQ,aAE/B,CAACX,IAGJrB,qBAAU,YACY,uCAAG,WAAOiC,GAAP,eAAA1D,EAAA,yDAEjB0D,EAFiB,uBAGnBN,GAAc,GAHK,0CAMAnD,MAAM,gCAAiC,CAC1DC,OAAQ,MACRC,KAAM,OACNC,QAAS,CACP,cAAgB,UAAhB,OAA2BsD,MAVV,YAMjBrD,EANiB,QAaPC,GAbO,6BAaH2C,EAbG,UAae5C,EAASG,OAbxB,2CAefH,EAASC,IAA0B,QAApBD,EAASE,QAAkB6C,GAAc,GAfzC,4CAAH,sDAkBlBO,CAAe5D,KAChB,CAACA,IAOCtC,EACO,oCACN,kBAAC,EAAD,CAAQA,SAAUA,IAClB,kBAAC,EAAD,CAAmB0B,KAAMkD,EAAWhD,QAAS6D,IAC7C,kBAAC,EAAD,CAAWvB,UAAyB,cAAdU,IAA6B,KAI5Cc,EACF,kBAAC,EAAD,MAEE,kBAAC,EAAD,SCjEAS,MARf,WACE,OACI,kBAAC,EAAD,OCINC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEI,kBAAC,IAAD,CAAUrD,MAAOA,GACf,kBAAC,EAAD,QAINsD,SAASC,eAAe,W","file":"static/js/main.e2593947.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultIcon.cd9692eb.svg\";","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;","import React from 'react';\n\n\nconst Header = (props) => {\n    const {userData} = props\n\n    return (\n        <>\n        <div className=\" text-center text-lg sm:text-xl md:text-2xl font-fredoka p-2 flex justify-between tracking-wide text-white\">\n                <span className=\"flex justify-center self-center\">\n                {/* <img src={require(\"../icons/runnerman.svg\")} alt=\"running / music logo\" className=\"inline mr-1 self-center\" style={{verticalAlign: 'middle', height: \"1.2em\"}}/> */}\n                BPM Playlist Maker\n                </span>\n                {/* pulls in the profile picture and the css just, uhhh, makes it circular and stuff */}\n                \n                <img src={userData.images[0].url} alt=\"profile\" className=\"self-center mr-2\" style={{maxHeight: \"1.2em\", width: \"1.2em\", objectFit: \"cover\", borderRadius: \"50%\"}}/> \n        </div>\n        </>\n    )\n}\n\n\nexport default Header","\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"4451d90a4f634c33b6f4e015d616ab44\";\nexport const redirectUri = \"https://brentably.github.io/SpotifyPlaylistMaker\";\n// export const redirectUri = \"http://192.168.0.246:3000/\";\nexport const scopes = [\n    \"ugc-image-upload\",\n    \"user-top-read\",\n    \"user-read-playback-position\",\n    \"user-read-recently-played\",\n    \"user-read-playback-state\",\n    \"user-read-currently-playing\",\n    \"user-modify-playback-state\",\n    \"user-library-modify\",\n    \"user-library-read\",\n    \"streaming\",\n    \"app-remote-control\",\n    \"user-read-private\",\n    \"user-read-email\",\n    \"user-follow-modify\",\n    \"user-follow-read\",\n    \"playlist-modify-public\",\n    \"playlist-read-collaborative\",\n    \"playlist-read-private\",\n    \"playlist-modify-private\"\n];","import React from \"react\"\nimport { authEndpoint, clientId, redirectUri, scopes } from \"../auth/config\"\n// import Modal from \"react-bootstrap/Modal\"\nimport Button from \"react-bootstrap/Button\"\nimport styled from \"styled-components\"\n\nconst ModalHeader = styled.div`\ntext-align: center;\nfont-size: 2.5rem;\n`\nconst Body = styled.div`\nwidth: 100vw;\nheight: 100vh;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n`\n\nconst CenteredDiv = styled.div`\ncolor: white;\nwidth: 400px;\n\n`\n\nconst ModalBody = styled.div`\nword-wrap: break-word;\nmargin: 0 1em;\ntext-align: center;\n`\n\nconst Login = () => {\n  return (\n    <Body>\n      <CenteredDiv>\n        <ModalHeader className=\"font-fredoka\">BPM Playlist Maker</ModalHeader>\n        <ModalBody >\n          This app allows you to create playlists based on the BPM of songs to\n            create perfectly customized running playlists.<br/>\n          \n          <Button\n            href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n              \"%20\"\n            )}&response_type=token&show_dialog=false`}\n            className=\"my-3\" style={{backgroundColor: \"#1dd05d\"}}\n          >\n            Connect to Spotify\n          </Button>\n        </ModalBody>\n        </CenteredDiv>\n    </Body>\n  )\n}\n\nexport default Login\n\n\n\n","import React from 'react'\n\nconst Loading = () => <div className=\"text-white text-3xl text-center\"></div>\n\nexport default Loading","import React from 'react'\nimport styled from 'styled-components'\n\n\nconst Item = styled.div`\nmargin-right: 1em;\n`\nconst MusicTypeSelector = (props) => {\n    return (\n        <div className=\"text-silver flex text-xl tracking-wide mt-2 p-2 font-nunito-semibold\">\n        <Item className={props.type === \"Playlists\" && \"selected\"} onClick={() => {props.setType(\"Playlists\")}}>Playlists</Item>\n        <Item className={props.type === \"Albums\" && \"selected\"} onClick={() => {props.setType(\"Albums\")}}>Albums</Item>\n        <Item className={props.type === \"Artists\" && \"selected\"} onClick={() => {props.setType(\"Artists\")}}>Artists</Item>\n        </div>\n    )\n}\n\n\nexport default MusicTypeSelector","import React from 'react'\nimport defaultIcon from \"../icons/defaultIcon.svg\"\n\nconst Card = (props) => {\n    // console.log(props)\n    return (\n        <div className=\"text-white flex font-nunito-semibold ellipsis items-center\" style={{margin: \"0.6rem\"}}>\n            <img src={props.images[0] ? props.images[0].url : defaultIcon} alt=\"{props.musicType}\" className=\"mr-2\" style={{objectFit: \"cover\", height: \"3.4em\", width: \"3.4em\"}} />\n            <div className=\"ellipsis\">\n            <div className=\"text-md ellipsis\">{props.name}</div>\n            <div className=\"text-sm text-silver\">by {props.owner.display_name}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","// import React from 'react'\n\nconst callAPI = async (fetchURL, token) => {\n        let response = await fetch(fetchURL, {\n          method: 'GET', // *GET, POST, PUT, DELETE, etc.\n          mode: 'cors', // no-cors, *cors, same-origin\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }})\n          if(response.ok && response.status === \"200\") return await response.json()\n          else return await response\n}\n\nexport default callAPI","import React, { useEffect, useState, useCallback} from 'react'\nimport Card from './Card'\nimport Loading from './Loading'\nimport callAPI from '../helpers/callAPI'\nimport InfiniteScroll from 'react-infinite-scroller';\nimport {connect} from 'react-redux';\n\n\nconst Playlists = (props) => {\n  const {token} = props\n  const [playlists, setPlaylists] = useState([])\n  const [nextPlaylistUrl, setNextPlaylistUrl] = useState('https://api.spotify.com/v1/me/playlists?offset=0&limit=40')\n\n\n  \n  // useEffect(() => {\n    //     console.log(playlists)\n    //     // playlists && console.log(playlists.items[0])\n    // }, [playlists])  \n    \n    \n// when the scroller reaches the bottom, this is the load more function\n  const handleLoadMore = async () => {\n    //  returns there are no more playlists to load\n    if(!nextPlaylistUrl) return;\n\n    const response = await callAPI(nextPlaylistUrl, token)\n    if(response.ok) {\n      const body = await response.json()\n      // puts playlists in state, which triggers a re-render\n      setPlaylists((prevPlaylists) => {\n        return [...prevPlaylists, ...body.items]\n      })\n      console.log(body)\n      // and sets the next playlist url for the next time the load more function is called\n      setNextPlaylistUrl(body.next)\n    }\n  }\n\n// annoying syntax used to load the initial data on the first render\n  const initHandleLoadMore = useCallback(handleLoadMore, []);\n  useEffect(() => {initHandleLoadMore()}, [initHandleLoadMore])\n      \n  // if state has been updated\n  return (playlists.length > 0) ? (\n    // if the undisplay prop is set to true, this div hides all the playlists, that way it doesn't have to call the api.\n    // there's got to be a better way to do this though...\n  <div className={props.undisplay ? \"hidden\" : \"undefined\"}>\n    <InfiniteScroll\n  pageStart={0}\n  loadMore={handleLoadMore}\n  // the api returns NULL if you've loaded all the playlists, which will set the hasMore boolean to false, and stop infinite scroll from trying to load any more\n  hasMore={Boolean(nextPlaylistUrl)}\n  loader={<div className=\"loader\" key={0}>Loading ...</div>}\n    >\n  {playlists.map(playlist => <Card {...playlist} key={playlist.id} musicType=\"Playlist\"/> )}\n    </InfiniteScroll>\n  </div>)\n  : \n  <Loading />\n}\n\nexport default connect((store) => ({token: store.token}), {})(Playlists)\n\n\n\n// function mapStateToProps(globalState) {\n//   // return an object where the keys are the name of the prop your component wants,\n//   // values are the actual parts of the global state your component wants\n// }\n\n// export default connect(/* What parts of state do you want? */, /* What actions to dispatch? */)(App)","import {createStore} from \"redux\"\n\n\nexport function addToken(token) {\n    return {\n        type: \"ADD_TOKEN\",\n        payload: token\n    }\n}\n\nconst initState = {\n    token: null\n}\n\nfunction reducer(state = initState, action) {\n    switch(action.type) {\n        case \"ADD_TOKEN\":\n            return {\n                ...state,\n                token: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nconst store = createStore(reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nstore.subscribe(() => console.log(store.getState()))\n\n\nexport default store\n","import React, { useState, useEffect} from 'react';\nimport hash from \"./auth/hash\"\nimport Header from './components/Header';\nimport Login from './components/Login';\nimport Loading from './components/Loading';\nimport MusicTypeSelector from './components/MusicTypeSelector';\nimport Playlists from './components/Playlists'\n// import Albums from './components/Albums'\n// import Artists from './components/Artists'\nimport {connect} from \"react-redux\"\nimport {addToken} from './redux'\nimport './App.css'\n\n\n\nconst Home = (props) => {\n  const {addToken} = props\n  hash.error && console.log(hash.error)\n  const [token, setToken] = useState(null)\n  const [userData, setUserData] = useState(null)\n  const [musicType, setMusicType] = useState(\"Playlists\")\n  const [authFailed, setAuthFailed] = useState(false)\n\n  // checks the url for the token, and sets the token if it's there, otherwise checks local storage and sets that, also sets the token in redux global store with props.addToken\n  // I'm using localStorage right now, mainly for my own development purposes, it keeps me from having to hit login every time I edit code and want to look at the app.\n  useEffect(()=> {\n    if(hash.access_token) {\n      setToken(hash.access_token)\n      localStorage.clear()\n      localStorage.setItem('token', hash.access_token)\n      addToken(hash.access_token)\n      console.log(hash.access_token)\n    } else {\n      setToken(localStorage.getItem('token'))\n      addToken(localStorage.getItem('token'))\n    }\n  }, [addToken]) /* addToken will never change, it's just a required dependency*/\n\n// calls the api, helps make sure everything is working\n  useEffect(() => {\n    const spotifyConnect = async (_token) => {\n      // if the key doesn't exist, then it stops the function and allows for the Login component to be rendered\n      if(!_token) {\n        setAuthFailed(true)\n        return\n      }\n      let response = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        headers: {\n          'Authorization': `Bearer ${_token}`\n        }})\n        // sets state to the response of the api\n        if(response.ok) setUserData(await response.json())\n        // if the response didn't work, and it had a status of 401 unauthorized, sets failed to true, which renders the login component\n        if(!response.ok && response.status === \"401\") setAuthFailed(true)\n\n      }\n      spotifyConnect(token)\n  }, [token])\n\n  // useEffect(() => {\n  //   console.log(userData)\n  // }, [userData])\n\n\n    if(userData) {\n      return (<>\n        <Header userData={userData}/>\n        <MusicTypeSelector type={musicType} setType={setMusicType}/>\n        <Playlists undisplay={musicType !== \"Playlists\" && true}/>\n        {/* {musicType === \"Albums\" && <Albums />} */}\n        {/* {musicType === \"Artists\" && <Artists />} */}\n        </>)\n    } else if (authFailed) {\n      return <Login />\n      } else {\n        return <Loading />\n      }\n  }\n\n\n\n\n\n// redux: this component isn't pulling anything from redux, but IS pushing the token to redux store\nexport default connect(null, {addToken})(Home)","import React from 'react';\nimport Home from './Home'\n// import { GlobalContextProvider }  from './hooks/GlobalContext'\n\nfunction App() {\n  return (\n      <Home />\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport './App.css'\nimport App from './App';\nimport {Provider} from \"react-redux\"\nimport store from \"./redux\"\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Router> */}\n      <Provider store={store}>\n        <App />\n      </Provider>\n    {/* </Router> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}