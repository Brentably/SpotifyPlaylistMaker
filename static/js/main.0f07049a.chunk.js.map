{"version":3,"sources":["auth/hash.js","components/Header.js","auth/config.js","components/Login.js","components/Loading.js","components/MusicTypeSelector.js","components/PlaylistCard.js","components/Playlists.js","Home.js","App.js","index.js"],"names":["hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Header","props","userData","className","src","images","url","alt","style","maxHeight","width","objectFit","borderRadius","scopes","ModalHeader","styled","div","Body","CenteredDiv","ModalBody","Login","Button","href","join","backgroundColor","Loading","Item","MusicTypeSelector","type","onClick","setType","PlaylistCard","maxWidth","name","Playlists","token","useContext","TokenContext","useState","playlists","setPlaylists","useEffect","key","a","fetch","method","mode","headers","response","ok","json","spotifyConnect","console","log","items","map","playlist","id","React","createContext","Home","error","setToken","setUserData","musicType","setMusicType","failed","setFailed","access_token","localStorage","clear","setItem","getItem","status","Provider","value","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f07049a.chunk.js","sourcesContent":["// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;","import React from 'react';\n\n\nconst Header = (props) => {\n    const {userData} = props\n\n    return (\n        <>\n        <div className=\" text-center text-lg sm:text-xl md:text-2xl font-fredoka p-2 flex justify-between tracking-wide text-white\">\n                <span className=\"flex justify-center self-center\">\n                {/* <img src={require(\"../icons/runnerman.svg\")} alt=\"running / music logo\" className=\"inline mr-1 self-center\" style={{verticalAlign: 'middle', height: \"1.2em\"}}/> */}\n                BPM Playlist Maker\n                </span>\n                {/* pulls in the profile picture and the css just, uhhh, makes it circular and stuff */}\n                \n                <img src={userData.images[0].url} alt=\"profile\" className=\"self-center mr-2\" style={{maxHeight: \"1.2em\", width: \"1.2em\", objectFit: \"cover\", borderRadius: \"50%\"}}/> \n        </div>\n        </>\n    )\n}\n\n\nexport default Header","\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"4451d90a4f634c33b6f4e015d616ab44\";\nexport const redirectUri = \"https://brentably.github.io/SpotifyPlaylistMaker\";\nexport const scopes = [\n    \"ugc-image-upload\",\n    \"user-top-read\",\n    \"user-read-playback-position\",\n    \"user-read-recently-played\",\n    \"user-read-playback-state\",\n    \"user-read-currently-playing\",\n    \"user-modify-playback-state\",\n    \"user-library-modify\",\n    \"user-library-read\",\n    \"streaming\",\n    \"app-remote-control\",\n    \"user-read-private\",\n    \"user-read-email\",\n    \"user-follow-modify\",\n    \"user-follow-read\",\n    \"playlist-modify-public\",\n    \"playlist-read-collaborative\",\n    \"playlist-read-private\",\n    \"playlist-modify-private\"\n];","import React from \"react\"\nimport { authEndpoint, clientId, redirectUri, scopes } from \"../auth/config\"\n// import Modal from \"react-bootstrap/Modal\"\nimport Button from \"react-bootstrap/Button\"\nimport styled from \"styled-components\"\n\nconst ModalHeader = styled.div`\ntext-align: center;\nfont-size: 2.5rem;\n`\nconst Body = styled.div`\nwidth: 100vw;\nheight: 100vh;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n`\n\nconst CenteredDiv = styled.div`\ncolor: white;\nwidth: 400px;\n\n`\n\nconst ModalBody = styled.div`\nword-wrap: break-word;\nmargin: 0 1em;\ntext-align: center;\n`\n\n\n\nconst Login = () => {\n  return (\n    <Body>\n      <CenteredDiv>\n        <ModalHeader className=\"font-fredoka\">BPM Playlist Maker</ModalHeader>\n        <ModalBody >\n          This app allows you to create playlists based on the BPM of songs to\n            create perfectly customized running playlists.<br/>\n          \n          <Button\n            href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n              \"%20\"\n            )}&response_type=token&show_dialog=false`}\n            className=\"my-3\" style={{backgroundColor: \"#1dd05d\"}}\n          >\n            Connect to Spotify\n          </Button>\n        </ModalBody>\n        </CenteredDiv>\n    </Body>\n  )\n}\n\nexport default Login\n\n\n\n","import React from 'react'\n\nconst Loading = () => <div className=\"text-white text-3xl text-center\">Loading...</div>\n\nexport default Loading","import React from 'react'\nimport styled from 'styled-components'\n\n\nconst Item = styled.div`\nmargin-right: 1em;\n`\nconst MusicTypeSelector = (props) => {\n    return (\n        <div className=\"text-silver flex text-xl tracking-wide mt-2 p-2 font-nunito-semibold\">\n        <Item className={props.type === \"Playlists\" && \"selected\"} onClick={() => {props.setType(\"Playlists\")}}>Playlists</Item>\n        <Item className={props.type === \"Albums\" && \"selected\"} onClick={() => {props.setType(\"Albums\")}}>Albums</Item>\n        <Item className={props.type === \"Artists\" && \"selected\"} onClick={() => {props.setType(\"Artists\")}}>Artists</Item>\n        </div>\n    )\n}\n\n\nexport default MusicTypeSelector","import React from 'react'\n\nconst PlaylistCard = (props) => {\n    // console.log(props)\n    return (\n        <div className=\"text-white flex m-2 font-nunito-semibold\">\n            <img src={props.images[0].url} alt=\"Playlist\" className=\"mr-2\" style={{objectFit: \"cover\", maxWidth: \"4em\"}} />\n            <div className=\"text-sm\">{props.name}</div>\n        </div>\n    )\n}\n\nexport default PlaylistCard","import React, { useContext, useEffect, useState } from 'react'\nimport {TokenContext} from '../Home'\nimport PlaylistCard from './PlaylistCard'\nimport Loading from './Loading'\nconst Playlists = () => {\n    const token = useContext(TokenContext)\n    const [playlists, setPlaylists] = useState(null)\n    useEffect(() => {\n        const spotifyConnect = async (key) => {\n          if(!key) return\n          let response = await fetch('https://api.spotify.com/v1/me/playlists?offset=0&limit=20', {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            headers: {\n              'Authorization': `Bearer ${key}`\n            }})\n            if(response.ok) setPlaylists(await response.json())\n          }\n          spotifyConnect(token)\n      }, [token])\n\n    useEffect(() => {\n        console.log(playlists)\n        playlists && console.log(playlists.items[0])\n    }, [playlists])  \n\n\n\n\n    return playlists ? (\n    <>\n    {playlists.items.map((playlist) => <PlaylistCard {...playlist} key={playlist.id}/> )}\n    </>)\n    : \n    <Loading />\n}\n\nexport default Playlists","import React, { useState, useEffect} from 'react';\nimport hash from \"./auth/hash\"\nimport Header from './components/Header';\nimport Login from './components/Login';\nimport Loading from './components/Loading';\nimport MusicTypeSelector from './components/MusicTypeSelector';\nimport Playlists from './components/Playlists'\n// import Albums from './components/Albums'\n// import Artists from './components/Artists'\nimport './App.css'\nexport const TokenContext = React.createContext()\n\n\nconst Home = () => {\n\n  hash.error && console.log(hash.error)\n  const [token, setToken] = useState(null)\n  const [userData, setUserData] = useState(null)\n  const [musicType, setMusicType] = useState(\"Playlists\")\n  const [failed, setFailed] = useState(false)\n\n  // checks the url for the token, and sets the token if it's there, otherwise checks local storage and sets that\n  useEffect(()=> {\n    if(hash.access_token) {\n      setToken(hash.access_token)\n      localStorage.clear()\n      localStorage.setItem('token', hash.access_token)\n      console.log(hash.access_token)\n    } else {\n      setToken(localStorage.getItem('token'))\n    }\n  }, [])\n\n// calls the api, helps make sure everything is working\n  useEffect(() => {\n    const spotifyConnect = async (key) => {\n      if(!key) setFailed(true)\n      let response = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        headers: {\n          'Authorization': `Bearer ${key}`\n        }})\n        console.log(response.ok)\n        console.log(response.status)\n\n        if(response.ok) setUserData(await response.json())\n        if(!response.ok || response.status === \"401\") setFailed(true)\n\n      }\n      spotifyConnect(token)\n  }, [token])\n\n  // useEffect(() => {\n  //   console.log(userData)\n  // }, [userData])\n\n\n    if(userData) {\n      return (\n        <TokenContext.Provider value={token}>\n        <Header userData={userData}/>\n        <MusicTypeSelector type={musicType} setType={setMusicType}/>\n        {musicType === \"Playlists\" && <Playlists />}\n        {/* {musicType === \"Albums\" && <Playlists />} */}\n        {/* {musicType === \"Artists\" && <Playlists />} */}\n  \n        </TokenContext.Provider>)\n    } else if (failed) {\n      return <Login />\n      } else {\n        return <Loading />\n      }\n  }\n\n\n\nexport default Home","import React from 'react';\n// import Login from './components/Login'\nimport Home from './Home'\n// import {Switch, Route} from \"react-router-dom\"\n// import hash from './auth/hash';\n// not using react router rn\n\n\nfunction App() {\n  // if(!hash.access_token) return <Login />\n  return (\n    <div>\n      {/* <Switch> */}\n          {/* <Route exact path=\"/\"> */}\n              <Home />\n          {/* </Route> */}\n      {/* </Switch> */}\n    </div>\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport './App.css'\nimport App from './App';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}